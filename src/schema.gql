# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  nickName: String!
  phone: String!
  email: String
  avatarUrl: String
  role: Float!
  createTime: DateTime!
  updateTime: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type StatusModel {
  code: Float!
  msg: String!
}

type Token {
  authorization: String!
}

type Comment {
  id: ID!
  type: Int!
  name: String!
  content: String!
  email: String!
  likes: String!
  browser: String!
  envirconment: String!
  visible: Boolean!
  createTime: String!
  article: Article
  rootComment: Comment
  parentComment: Comment
  childComment: [Comment!]!
  hasChildren: Boolean!
}

type LiveShared {
  id: ID!
  content: String!
  address: String
  emotion: String
  illustration: String
  weight: Float
  createTime: DateTime!
  updateTime: DateTime!
  tags: [Tags!]!
}

type PhotoWall {
  id: ID!
  name: String!
  path: String!
  originUrl: String
  author: String
  createTime: String!
  tags: [Tags!]!
}

type Tags {
  id: ID!
  type: Float!
  name: String!
  nameEn: String
  weight: Float!
  createTime: DateTime!
}

type Article {
  id: ID!
  title: String!
  viewNum: Float!
  summary: String
  content: String
  contentNum: Float!
  likes: Float!
  weight: Float!
  isPublic: Boolean!
  createTime: String!
  updateTime: String!
  tags: [Tags!]
  groups: [Group!]
  comments: [Comment!]
}

type Group {
  id: ID!
  name: String!
  nameEn: String
  createTime: String!
  articles: [Article!]!
}

type ArticleAllModel {
  totalCount: Float!
  nodes: [Article!]!
}

type ArticleModel {
  id: ID!
  tags: [Tags!]!
  group: [Group!]!
  comments: [Comment!]!
}

type PaginatedPhotoWall {
  nodes: [PhotoWall!]
  totalCount: Int!
}

type CommnetAndCount {
  nodes: [Comment!]
  totalCount: Int!
}

type FilePath {
  path: String!
  fullPath: String!
}

type FileSuccessModel {
  code: Int!
  msg: String!
  nodes: FilePath
}

type Type {
  id: ID!
  name: String!
  rootType: Type
  parentType: Type
  childType: [Type!]
  hasChildren: Boolean!
}

type Query {
  login(input: LoginInput!): Token!
  getUserByPhoneAndEmail(phoneAndEmail: String!): User!
  getArticleList(limit: Int!, offset: Int!): ArticleAllModel!
  getArticleById(id: String!): Article!
  getAllTag(type: Float!): [Tags!]!
  getTagsList(paginationQuery: PaginationQuerInput!, type: Int): [Tags!]!
  getPhotoWallList(input: PaginationQuerInput!): PaginatedPhotoWall!
  getPhotoWallById(id: String!): PhotoWall!
  getCommentByArticleId(ariticleId: String!): CommnetAndCount!
  getCommentByID(id: String!): Comment!
  getCommnet(input: PaginationQuerInput!): CommnetAndCount!
  getCommentByRoot(input: PaginationQuerInput!): CommnetAndCount!
  getLiveSharedById(id: String!): LiveShared!
  getLiveSharedList(paginationQuery: PaginationQuerInput!): [LiveShared!]!
  getTypeByRoot(input: PaginationQuerInput!): [Type!]!
}

input LoginInput {
  account: String!
  password: String!
}

input PaginationQuerInput {
  limit: Float!
  offset: Float!
}

type Mutation {
  createAccount(input: CreateInput!): StatusModel!
  createArticle(articleInsertInput: ArticleInsertInput!): Article!
  deleteArticle(id: String!): StatusModel!
  updateArticle(input: ArticleUpdateInput!): Article!
  createTag(input: TagsCreateInput!): Tags!
  updateTag(input: TagsUpdateInput!): Tags!
  deleteTag(id: String!): StatusModel!
  addPhotoToWall(createPhotoInput: CreatePhotoInput!): PhotoWall!
  addPhotoWallList(createPhotoList: [CreatePhotoInput!]!): StatusModel!
  deletePhotoWall(id: String!): StatusModel!
  updatePhotoWall(updateInput: UpdatePhotoWallInput!): StatusModel!
  createComment(comment: createCommentInput!): StatusModel!
  updateComment(comment: updateCommentInput!): StatusModel!
  deleteComment(id: String!): StatusModel!
  createLiveShared(createLiveShared: CreateLiveSharedInput!): StatusModel!
  updateLiveShared(updateLiveShared: UpdateLiveSharedInput!): StatusModel!
  deleteLiveShared(id: String!): StatusModel!
  singleUpload(file: Upload!): FileSuccessModel!
  createType(input: createTypeInput!): StatusModel!
  deleteType(id: String!): StatusModel!
  updateType(input: updateTypeInput!): StatusModel!
}

input CreateInput {
  nickName: String!
  phone: String!
  password: String!
}

input ArticleInsertInput {
  weight: Float!
  title: String!
  summary: String
  content: String
  isPublic: Boolean!
  tags: [String!]
  groups: [String!]
}

input ArticleUpdateInput {
  id: ID!
  weight: Float!
  title: String!
  summary: String
  content: String
  isPublic: Boolean!
  tags: [String!]
  groups: [String!]
}

input TagsCreateInput {
  type: Float!
  name: String!
  nameEn: String
  weight: Float
}

input TagsUpdateInput {
  id: ID!
  type: Float!
  name: String!
  nameEn: String
  weight: Float
}

input CreatePhotoInput {
  file: Upload!
  name: String!
  originUrl: String
  author: String
  tags: [String!]
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UpdatePhotoWallInput {
  file: Upload
  id: String!
  name: String!
  originUrl: String
  author: String
  tags: [String!]
}

input createCommentInput {
  type: Float!
  name: String!
  content: String!
  email: String
  browser: String!
  envirconment: String!
  article: String
  rootComment: String
  parentComment: String
  childComment: String
}

input updateCommentInput {
  id: String!
  name: String
  content: String
  email: String
  browser: String
  visible: Boolean
  envirconment: String
  article: String
  rootComment: String
  parentComment: String
}

input CreateLiveSharedInput {
  file: Upload
  weight: Float
  content: String!
  address: String
  emotion: String
  tags: [String!]
}

input UpdateLiveSharedInput {
  id: ID!
  file: Upload
  weight: Float
  content: String!
  address: String
  emotion: String
  tags: [String!]
}

input createTypeInput {
  name: String!
  rootType: String
  parentType: String
}

input updateTypeInput {
  id: String!
  name: String
  rootType: String
  parentType: String
}